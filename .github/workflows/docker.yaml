name: Docker

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - 'master'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PGVERSION: 16

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#      - name: Build and push Docker image
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          file: .github/Dockerfile
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          build-args: PGVERSION=${{ env.PGVERSION }}

      - name: Save Vars
        id: save-output
        run: |
          echo "IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "TAG=${{ steps.meta.outputs.tags }}"            >> $GITHUB_OUTPUT
    outputs:
      img-name: ${{ steps.save-output.outputs.IMG }}
      img-tag:  ${{ steps.save-output.outputs.TAG }}

  create-cluster:
    needs: docker
    runs-on: ubuntu-latest
    env:
      IMG: ${{ needs.docker.outputs.img-name }}
      TAG: ${{ needs.docker.outputs.img-tag }}
    steps:
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1

      - name: Checkout
        uses: actions/checkout@v4

      - name: Run tests
        shell: bash
        run: |
          sudo apt-get -y install gettext-base jq sed

          export IMAGE=${{ env.IMG }}:${{ env.TAG }}
          echo "Image is: $IMAGE"

          ls -la

          for i in `ls -1 .github/manifests/*.yaml` ; do
            sed -i 's#DOCKERIMAGE#$MAGE#' $i
            kubectl apply -f $i
          done

          KUBERUN="kubectl run --quiet -i -t stolonctl --image=stolon:master-pg11 --restart=Never --rm --"
          $KUBERUN /usr/local/bin/stolonctl --cluster-name=kube-stolon --store-backend=kubernetes --kube-resource-kind=configmap init -y
